


1-Authentication: Process of identifying if the user is who the claimed they are
that's when we login
so we send our user and password to the server and the server authenticate us


2-Authorization: is determining if the user has the right permission 
to perform the given operation

so in our vildy application we wanna make sure that only authenticated user or only logged in users
can perform operations that modify data so if the user is anonymous 
if they are not logged in...they only read data from this endpoints.

if they want to create a new genre or a new rental ..they have to be authenticated first


Registering users

    Register:    POST /api/users   {name  , email , password }
    Login:       POST /api/logins 

email : {
    type:String,
    unique: true
}

---------------

la hata ma traje3 el password
video 127
we are gonna modidied the response of this api endpoint

================
video 128
sign up
we store our password in a plein text..and that's very very bad.

so lets hash this password

Hashing Passwords

very popular library called bcrypt

npm i bcrypt

=========================================

video 129

Authentication / login
=================================

video 130 Testing the Authentication


=======================================
video 131

modifing the response and using the json web token

JSON web Tokens
jwt : is a long string that identifie a user
its very similar to your driver licence or password

when the user logges in on the server we generate this jwt which is like a driver license
then we give it to client and then tell them..hey next time you wanna come back here
and call the api..you need to show your driver license or ur password. this is ur id



=====================================================================
video 132

Generating Authentication Tokens

npm i jsonwebtoken

===================================


video 133

how to move the private key into an environement variable.


npm i config

Storing Secrets in Environment Variables


=============================================


            video 134

Setting Response Headers

when the user registers we wanna asume there logged
 in..so there is no need to login each time.


   -> return the JWT in an http header
   w baada lah tethafaz el token bel header


finally
   in our client app...when we register a user we can read this header
   we can store this web token on the client
and next time we gonna make an api call well send this to the server


========================================================

  video 135

          Encapsulating Logic in Mongoose Models.
repetition

where should we move this logic too ?

in OOP we have a principle called
         Information Expert Principle
That means an object that have enough Information and is an expert

=======================================

video 136

bas el Authenticated users fion ya3melo tegyir bel data



===================================

video 137

Protecting Routes

================================================

video 138

Getting The Current user

Authentication : validatating the username and password
authorization: if the user has permission to access a resource or not


============================================================

video 139

Logging Out a User

u should not store token in database..but store on the client side
like localhost..i u are sure u want to store in the database
make sure to hash it , to encrypted


cz i u store the jwt in database witouth hashing..anyone can get it and send it
to the server..and do all the methd post....
=====================================================
video 144

if we use async and await, we should use " try catch blocks"

if we are using the promise syntax with "then" we should always call catch
to handle exception

============================
video 145

Express Error middleware

================================================
video 147

// the best approach is to use the package and not the Code
in async.js

express async errors

he bta3mul try catch la kell route handler men 5ilel ano ennazel
el package bas..ktir shaglta hayne

npm i express-async-errors

==========================================================

video 148

Logging to MongoDB

npm i winston-mongodb

=======================================================
const winston = require('winston');
require('winston-mongodb');
require('express-async-errors');

module.exports = function() {
  winston.handleExceptions(
    new winston.transports.File({ filename: 'uncaughtExceptions.log' }));
  
  process.on('unhandledRejection', (ex) => {
    throw ex;
  });
  
  winston.add(winston.transports.File, { filename: 'logfile.log' });
  winston.add(winston.transports.MongoDB, { 
    db: 'mongodb://localhost/vidly',
    level: 'info'
  });  
}

==========================================
video 151

unhandled promise rejection

==============================================================
video 154
extracting the db logic
======================================================================
To log errors use winston. 
- Winston can log errors in multiple transports. A transport is where your log is 
stored. 
- The core transports that come with Winston are Console, File and Http. There 
are also 3rd-party transports for storing logs in MongoDB, CouchDB, Redis and 
Loggly. 
- The error middleware in Express only catches exceptions in the request 
processing pipeline. Any errors happening during the application startup (eg 
connecting to MongoDB) will be invisible to Express. 
- Use process.on(‘uncaughtException’) to catch unhandled exceptions, and 
process.on(‘unhandledRejection’) to catch rejected promises. 
- As a best practice, in the event handlers you pass to process.on(), you should
log the exception and exit the process, because your process may be in an 
unclean state and it may result in more issues in the future. It’s better to restart 
the process in a clean state. In production, you can use a process manager to 
automatically restart a Node process. You’ll learn about that later in the course.
